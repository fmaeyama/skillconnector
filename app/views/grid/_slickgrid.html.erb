<script>
	function CreateAddlHeaderRow() {
		var $preHeaderPanel = $(grid.getPreHeaderPanel())
			.empty()
			.addClass("slick-header-columns")
			.css('left','-1000px')
			.width(grid.getHeadersWidth());
		$preHeaderPanel.parent().addClass("slick-header");
		var headerColumnWidthDiff = grid.getHeaderColumnWidthDiff();
		var m, header, lastColumnGroup = '', widthTotal = 0;

		for (var i = 0; i < columns.length; i++) {
			m = columns[i];
			if (lastColumnGroup === m.columnGroup && i>0) {
				widthTotal += m.width;
				header.width(widthTotal - headerColumnWidthDiff)
			} else {
				widthTotal = m.width;
				header = $("<div class='ui-state-default slick-header-column' />")
					.html("<span class='slick-column-name'>" + (m.columnGroup || '') + "</span>")
					.width(m.width - headerColumnWidthDiff)
					.appendTo($preHeaderPanel);
			}
			lastColumnGroup = m.columnGroup;
		}
	}
	var dataView;
	var grid;
	var options = {
		enableCellNavigation: true,
		enableColumnReorder: false,
		createPreHeaderPanel: true,
		showPreHeaderPanel: true,
		preHeaderPanelHeight: 23,
		explicitInitialization: true
	};
	$(function () {
		dataView = new Slick.Data.DataView();
		grid = new Slick.Grid("#myGrid", dataView, columns, options);
		dataView.onRowCountChanged.subscribe(function (e, args) {
		grid.updateRowCount();
		grid.render();
	});
	dataView.onRowsChanged.subscribe(function (e, args) {
		grid.invalidateRows(args.rows);
		grid.render();
	});
	grid.init();
	grid.onColumnsResized.subscribe(function (e, args) {
		CreateAddlHeaderRow();
	});

	CreateAddlHeaderRow();

	// Initialise data
	dataView.beginUpdate();
	dataView.setItems(data);
	dataView.endUpdate();
	})
</script>
