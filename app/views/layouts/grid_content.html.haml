-content_for :content do
  = stylesheet_link_tag "lib/smoothness/jquery-ui-1.11.3.custom.css"
  = stylesheet_link_tag "lib/slick.grid.css"
  = stylesheet_link_tag "lib/examples.css"
  = stylesheet_link_tag "lib/select2.min.css"

  = javascript_include_tag "lib/firebugx.js"

  = javascript_include_tag "lib/jquery-ui-1.11.3.js"
  = javascript_include_tag "lib/jquery.event.drag-2.3.0.js"

  = javascript_include_tag "lib/slick.core.js"
  = javascript_include_tag "lib/plugins/slick.autotooltips.js"
  = javascript_include_tag "lib/plugins/slick.cellrangedecorator.js"
  = javascript_include_tag "lib/plugins/slick.cellrangeselector.js"
  = javascript_include_tag "lib/plugins/slick.cellexternalcopymanager.js"
  = javascript_include_tag "lib/plugins/slick.cellselectionmodel.js"
  = javascript_include_tag "lib/slick.editors.js"
  = javascript_include_tag "lib/slick.formatters.js"
  = javascript_include_tag "lib/slick.dataview.js"
  = javascript_include_tag "lib/slick.grid.js"
  = javascript_include_tag "lib/select2.min.js"
  
  :css
    .slick-preheader-panel.ui-state-default {
      width: 100%;
      overflow: hidden;
      border-left: 0px !important;
      border-bottom: 0px !important;
      box-sizing: content-box;
    }
    .slick-preheader-panel .slick-header-columns {
      border-bottom: 0px !important;
      box-sizing: content-box;
    }
    .slick-cell.copied{
      background: blue;
      background: rgba(0,0,255,0.2);
      -webkit-transition: 0.5s background
    }

  %h2
    =@var.title
    
  %hr
  =button_tag 'undo'
  %select.js-example-basic-single{name:"state"}
    %option{value:"AL"}
      Alabama
    %option{value:"WY"}
      Wyoming
      
  #myGrid{style:"height:500px"}
  %hr
  =yield

  #json_data{data:{columns:"#{@var.columns.to_json}",
    table_opt:"#{@var.table_options.to_json}",
    data_arr:"#{@var.data.to_json}",helper_get_select_hash({1:1})}}
  - @var.select_arr.each do |select_hash|
    #select_data{}
  

  :javascript
    var grid_func = function(){
      var dataView;
      var grid;
      var data = $("#json_data").data("data-arr");
      var options = $("#json_data").data("table-opt");
      var columns = $("#json_data").data("columns");
      var selList = new Array();
      selList[0] ={2:"必須だと",3:"必須かも"};
    
      columns.forEach(function(col){
        col.editor = eval(col.editor);
        col.formatter = eval(col.formatter);
        col.dataSource = eval(col.dataSource);
      });
      
      function PopulateSelect(select, dataSource, addBlank){
        var index, len, newOption;
        if(addBlank){select.appendChild(new Option("",""))}
        $.each(dataSource, function(value, text){
          newOption = new Option(text,value);
          select.appendChild(newOption);
        });
      }
      
      function Select2Editor(args){
        var $input;
        var defaultValue;
        var scope = this;
        var calendarOpen=false;
        this.keyCaptureList = [Slick.keyCode.UP, Slick.keyCode.DOWN, Slick.keyCode.ENTER];
        this.init=function(){
          $input = $('<select></select>');
          $input.width(args.container.clientWidth + 3);
          PopulateSelect($input[0], args.column.dataSource, true);
          $input.appendTo(args.container);
          $input.focus().select();
          $input.select2({
            placeholder: '-',
            allowClear: true
          });
        };
        this.destroy = function(){
          $input.select2('destroy');
          $input.remove();
        };
        this.show=function(){};
        this.hide=function(){
          $input.select2('results_hide');
        };
        this.position=function(position){};
        this.focus=function(){
          $input.select2('input_focus');
        };
        this.loadValue=function(item){
          defaultValue=item[args.column.field];
          $input.val(defaultValue);
          $input[0].defaultValue=defaultValue;
          $input.trigger("change.select2");
        };
        this.serializeValue=function(){
          return $input.val();
        };
        this.applyValue=function(item,state){
          item[args.column.field]=state;
        };
        this.isValueChanged=function(){
          return(!($input.val()=="" && defaultValue==null)) && ($input.val() != defaultValue);
        };
        this.validate=function(){
          return{valid:true,msg:null};
        };
        this.init();
      };
      
      function Select2Formatter(row, cell, value, columnDef, dataContext){
        return columnDef.dataSource[value] || '-';
      };
      //for header group
      function CreateAddHeaderRow() {
        var $preHeaderPanel = $(grid.getPreHeaderPanel())
            .empty()
            .addClass("slick-header-columns")
            .css('left', '-1000px')
            .width(grid.getHeadersWidth());
        $preHeaderPanel.parent().addClass("slick-header");
        var headerColumnWidthDiff = grid.getHeaderColumnWidthDiff();
        var m, header, lastColumnGroup = '', widthTotal = 0;
      
        for (var i = 0; i < columns.length; i++) {
          m = columns[i];
          if (lastColumnGroup === m.columnGroup && i > 0) {
              widthTotal += m.width;
              header.width(widthTotal - headerColumnWidthDiff)
          } else {
              widthTotal = m.width;
              header = $("<div class='ui-state-default slick-header-column' />")
                  .html("<span class='slick-column-name'>" + (m.columnGroup || '') + "</span>")
                  .width(m.width - headerColumnWidthDiff)
                  .appendTo($preHeaderPanel);
          }
          lastColumnGroup = m.columnGroup;
        }
      }
    
      var undoRedoBuffer = {
        commandQueue : [],
        commandCtr : 0,
        queueAndExecuteCommand : function(editCommand){
          this.commandQueue[this.commandCtr] = editCommand;
          this.commandCtr++;
          editCommand.execute();
        },
        undo : function (){
          if (this.commandCtr == 0){return;}
          this.commandCtr--;
          var command = this.commandQueue[this.commandCtr];
          if (command && SlickGlobalEditorLock.cancelCurrentEdit()){
            command.exeute();
          }
        },
        redo : function(){
          if (this.commandCtr >= this.commandQueue.lenght) { return;}
          var command = this.commandQueue[this.commandCtr];
          this.commandCtr++;
          if (command && Slick.GlobalEditorLock.cancelCurrentEdit()){
            command.execute();
          }
        }
      }
    
      $(document).keydown(function(e){
        if (e.which == 90 && (e.ctrlKey || e.metaKey)){ //CTRL + (shift) + Z}
          if(e.shiftKey){
            undoRedoBuffer.redo();
          } else {
            undoRedoBuffer.undo()
          }
        }
      });
    
      var newRowIds = 0;
      
      var pluginOptions = {
        clipboardCommandHandler: function(editCommand){ undoRedoBUffer.queueAndExecuteCommand.call(undoRedoBuffer, editCommand);},
        readOnlyMode : false,
        includeHeaderWhenCopying : false,
        newRowCreator : function(count){
          for (var i = 0; i <=count; i++){
            var item = {
              id: "newRow_" + newRowIds++
            }
            grid.getData().addItem(item);
          }
        }
      };
      dataView = new Slick.Data.DataView();
      grid = new Slick.Grid("#myGrid", dataView, columns, options);
      grid.setSelectionModel(new Slick.CellSelectionModel());
      grid.registerPlugin(new Slick.AutoTooltips());

      grid.getCanvasNode().focus();

      grid.registerPlugin(new Slick.CellExternalCopyManager(pluginOptions));

      // grid.onAddNewRow.subscribe(function(e, args){
      //     var item = args.item;
      //     var column = args.column;
      //     grid.invalidateRow(data.length);
      //     data.push(item);
      //     grid.updateRowCount();
      //     grid.render();
      // });
      
      dataView.onRowCountChanged.subscribe(function (e, args) {
          grid.updateRowCount();
          grid.render();
      });
      
      dataView.onRowsChanged.subscribe(function (e, args) {
          grid.invalidateRows(args.rows);
          grid.render();
      });
      
      grid.init();
      grid.onColumnsResized.subscribe(function (e, args) {
          CreateAddHeaderRow();
      });

      CreateAddHeaderRow();
      //
      // // Initialise data
      dataView.beginUpdate();
      dataView.setItems(data);
      dataView.endUpdate();
    }
    grid_func();
  
= render template: 'layouts/application'